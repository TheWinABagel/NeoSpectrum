plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version '7.0.97'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenLocal()
	maven { url = "https://jitpack.io" } // Arrowhead, Dimensional Reverb, Step Height Entity Attribute
	maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
	maven { url = "https://maven.terraformersmc.com/" } // Modmenu, EMI
	maven { url = "https://maven.nucleoid.xyz/" } // Common Protection API
	maven { url = "https://maven.blamejared.com" } // Patchouli
	maven { url = "https://maven.ladysnake.org/releases" } // Cardinal Components API
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release/" } // Entity Reach Attribute
	maven { url = "https://api.modrinth.com/maven" } // Revelationary, Additional Entity Attributes, Fractal Lib, Colorful Hearts, idwtialsimmoedm
	maven { url = "https://cfa2.cursemaven.com" }
	maven { url = "https://repo.unascribed.com" } // Ears API
	maven { url = 'https://maven.parchmentmc.org' } // Parchment
	mavenCentral()
}

dependencies {
	// jetbrains annotations
	implementation ("org.jetbrains:annotations:24.0.1")

	// Neoforge
	implementation "net.neoforged:neoforge:${neo_version}"

	// graph api and its dependencies
//	implementation include("org.jgrapht:jgrapht-core:1.5.1")
//	implementation include("org.jheaps:jheaps:0.13")

	// Some other dependency is adding annotations, and it throws an error without this
//	compileOnly ("com.demonwav.mcdev:annotations:1.0")



	// mine
//	modImplementation ("maven.modrinth:Revelationary:${project.revelationary_version}")
//	modImplementation include("maven.modrinth:AdditionalEntityAttributes:${project.additional_entity_attributes_version}")
//	modImplementation include("com.github.DaFuqs:Arrowhead:${project.arrowhead_version}")
//	modImplementation include("com.github.DaFuqs:DimensionalReverb:${project.dimensional_reverb_version}")
//	modImplementation include("maven.modrinth:fractal-lib:${project.fractal_version}")
//	modImplementation include("com.github.Noaaan:Matchbooks:${project.matchbooks_version}")

	// external and compat
//	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") { exclude(group: "net.fabricmc.fabric-api") }
//	modApi("dev.architectury:architectury-fabric:${project.architectury_version}") { exclude(group: "net.fabricmc.fabric-api") }
//	modApi("com.terraformersmc:modmenu:${project.modmenu_version}")
//	modImplementation("eu.pb4:common-protection-api:${project.cpa_version}")
//	modImplementation("vazkii.patchouli:Patchouli:${project.patchouli_version}")
//	// https://maven.blamejared.com/vazkii/patchouli/Patchouli/
//	modImplementation("dev.emi:trinkets:${project.trinkets_version}") // https://github.com/emilyploszaj/trinkets
//	modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
//	// https://github.com/shedaniel/RoughlyEnoughItems
//	modCompileOnly("dev.emi:emi-fabric:${emi_version}") // https://github.com/emilyploszaj/emi

//	switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
//		case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"); break
//		case "emi": modLocalRuntime("dev.emi:emi-fabric:${emi_version}"); break
//		case "disabled": break
//		default: println("Unknown recipe viewer specified: $recipe_viewer. Must be EMI, REI or disabled.")
//	}

	// https://github.com/OnyxStudios/Cardinal-Components-API/wiki/
//	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}")
//	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}")
//	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-item:${project.cca_version}")
//	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-level:${project.cca_version}")
//
//	modImplementation include("com.github.emilyploszaj:step-height-entity-attribute:${project.step_height_attribute_version}")
//	modImplementation include("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_entity_attributes_version}")
//
//	implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}"))
	// shipped with FAPI

	// https://github.com/Terrails/HealthOverlay
	// Thanks to yurisuika for the head-up (https://github.com/yurisuika/Raised/blob/Fabric-1.19/build.gradle)
//	modCompileOnly("maven.modrinth:colorful-hearts:${project.colorful_hearts_version}") { transitive = false }

	// Connect to local dev servers
//	modLocalRuntime("curse.maven:authme-356643:4629826")

	// Ears compat by Maya!
//	modCompileOnly("com.unascribed:ears-api:${project.ears_version}")

	// Enchantment Descriptions compat
//	modCompileOnly("maven.modrinth:enchantment-descriptions:${project.enchantment_descriptions_version}")

	// idwtialsimmoedm compat
//	modImplementation("maven.modrinth:idwtialsimmoedm:${project.idwtialsimmoedm_version}")
}

runs {
	// applies to all the run configs below
	configureEach {
		// Recommended logging data for a userdev environment
		// The markers can be added/remove as needed separated by commas.
		// "SCAN": For mods scan.
		// "REGISTRIES": For firing of registry events.
		// "REGISTRYDUMP": For getting the contents of all registries.
		systemProperty 'forge.logging.markers', 'REGISTRIES'

		// Recommended logging level for the console
		// You can set various levels here.
		// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
		systemProperty 'forge.logging.console.level', 'debug'

		modSource project.sourceSets.main
	}

	client {
		// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
		programArgument '--nogui'
	}

	// This run config launches GameTestServer and runs all registered gametests, then exits.
	// By default, the server will crash when no gametests are provided.
	// The gametest system is also enabled by default for other run configs under the /test command.
	gameTestServer {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}

	data {
		// example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
		// workingDirectory project.file('run-data')

		// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
		programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

base {
	archivesName = mod_id
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

//loom {
//	accessWidenerPath = file("src/main/resources/spectrum.accesswidener")
//
//	runs {
//		datagen {
//			server()
//
//			name "Minecraft Data"
//			vmArg "-Dfabric-api.datagen"
//			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
//
//			runDir "build/datagen"
//		}
//	}
//}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
    it.options.release = 17 // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
}

//java {
//	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
//	// if it is present.
//	// If you remove this line, sources will not be generated.
//	withSourcesJar()
//}

jar {
	from("LICENSE.md") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		register('mavenJava', MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/repo"
		}
		mavenLocal()
	}
}

//publishing {
//	publications {
//		mavenJava(MavenPublication) {
//			// add all the jars that should be included when publishing to maven
//			artifact(remapJar) {
//				builtBy remapJar
//			}
//			artifact(sourcesJar) {
//				builtBy remapSourcesJar
//			}
//		}
//	}
//
//	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
//	repositories {
//		// Add repositories to publish to here.
//		// Notice: This block does NOT have the same function as the block in the top level.
//		// The repositories here will be used for publishing your artifact, not for
//		// retrieving dependencies.
//		mavenLocal()
//	}
//}
